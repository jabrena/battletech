{
	"auto_complete":
	{
		"selected_items":
		[
			[
				"hex",
				"hexHeight"
			],
			[
				"create",
				"createMapMatrix"
			],
			[
				"new",
				"newPosition"
			],
			[
				"red",
				"redMech"
			],
			[
				"y",
				"yDiff"
			],
			[
				"Ma",
				"MaxDistance"
			],
			[
				"ne",
				"newPosition"
			],
			[
				"curr",
				"currentPosition"
			],
			[
				"quantity",
				"quantityToBuy"
			],
			[
				"total",
				"totalItemCost"
			],
			[
				"cost",
				"costOfSoup"
			],
			[
				"format",
				"formatPrice"
			],
			[
				"priceFor",
				"_priceFormatter"
			]
		]
	},
	"buffers":
	[
		{
			"file": "App/PathFinding/core/Grid.js",
			"settings":
			{
				"buffer_size": 6569,
				"line_ending": "Windows"
			}
		},
		{
			"file": "App/PathFinding/core/Heuristic.js",
			"settings":
			{
				"buffer_size": 417,
				"line_ending": "Windows"
			}
		},
		{
			"file": "App/PathFinding/core/Util.js",
			"settings":
			{
				"buffer_size": 3395,
				"line_ending": "Windows"
			}
		},
		{
			"contents": "var Heap       = require('heap');\nvar Util       = require('../core/Util');\nvar Heuristic  = require('../core/Heuristic');\n\ndefine(['App/PathFinding/Core'])\n\n/**\n * A* path-finder.\n * based upon https://github.com/bgrins/javascript-astar\n * @constructor\n * @param {object} opt\n * @param {boolean} opt.allowDiagonal Whether diagonal movement is allowed.\n * @param {boolean} opt.dontCrossCorners Disallow diagonal movement touching block corners.\n * @param {function} opt.heuristic Heuristic function to estimate the distance\n *     (defaults to manhattan).\n * @param {integer} opt.weight Weight to apply to the heuristic to allow for suboptimal paths, \n *     in order to speed up the search.\n */\nfunction AStarFinder(opt) {\n    opt = opt || {};\n    this.allowDiagonal = opt.allowDiagonal;\n    this.dontCrossCorners = opt.dontCrossCorners;\n    this.heuristic = opt.heuristic || Heuristic.manhattan;\n    this.weight = opt.weight || 1;\n}\n\n/**\n * Find and return the the path.\n * @return {Array.<[number, number]>} The path, including both start and\n *     end positions.\n */\nAStarFinder.prototype.findPath = function(startX, startY, endX, endY, grid) {\n    var openList = new Heap(function(nodeA, nodeB) {\n            return nodeA.f - nodeB.f;\n        }),\n        startNode = grid.getNodeAt(startX, startY),\n        endNode = grid.getNodeAt(endX, endY),\n        heuristic = this.heuristic,\n        allowDiagonal = this.allowDiagonal,\n        dontCrossCorners = this.dontCrossCorners,\n        weight = this.weight,\n        abs = Math.abs, SQRT2 = Math.SQRT2,\n        node, neighbors, neighbor, i, l, x, y, ng;\n\n    // set the `g` and `f` value of the start node to be 0\n    startNode.g = 0;\n    startNode.f = 0;\n\n    // push the start node into the open list\n    openList.push(startNode);\n    startNode.opened = true;\n\n    // while the open list is not empty\n    while (!openList.empty()) {\n        // pop the position of node which has the minimum `f` value.\n        node = openList.pop();\n        node.closed = true;\n\n        // if reached the end position, construct the path and return it\n        if (node === endNode) {\n            return Util.backtrace(endNode);\n        }\n\n        // get neigbours of the current node\n        neighbors = grid.getNeighbors(node, allowDiagonal, dontCrossCorners);\n        for (i = 0, l = neighbors.length; i < l; ++i) {\n            neighbor = neighbors[i];\n\n            if (neighbor.closed) {\n                continue;\n            }\n\n            x = neighbor.x;\n            y = neighbor.y;\n\n            // get the distance between current node and the neighbor\n            // and calculate the next g score\n            ng = node.g + ((x - node.x === 0 || y - node.y === 0) ? 1 : SQRT2);\n\n            // check if the neighbor has not been inspected yet, or\n            // can be reached with smaller cost from the current node\n            if (!neighbor.opened || ng < neighbor.g) {\n                neighbor.g = ng;\n                neighbor.h = neighbor.h || weight * heuristic(abs(x - endX), abs(y - endY));\n                neighbor.f = neighbor.g + neighbor.h;\n                neighbor.parent = node;\n\n                if (!neighbor.opened) {\n                    openList.push(neighbor);\n                    neighbor.opened = true;\n                } else {\n                    // the neighbor can be reached with smaller cost.\n                    // Since its f value has been updated, we have to\n                    // update its position in the open list\n                    openList.updateItem(neighbor);\n                }\n            }\n        } // end for each neighbor\n    } // end while not open list empty\n\n    // fail to find the path\n    return [];\n};\n\nmodule.exports = AStarFinder;\n",
			"file": "App/PathFinding/finders/AStarFinder.js",
			"file_size": 3796,
			"file_write_time": 130291762116000803,
			"settings":
			{
				"buffer_size": 3727,
				"line_ending": "Windows"
			}
		}
	],
	"build_system": "",
	"command_palette":
	{
		"height": 392.0,
		"selected_items":
		[
		],
		"width": 416.0
	},
	"console":
	{
		"height": 0.0
	},
	"distraction_free":
	{
		"menu_visible": true,
		"show_minimap": false,
		"show_open_files": false,
		"show_tabs": false,
		"side_bar_visible": false,
		"status_bar_visible": false
	},
	"file_history":
	[
		"/D/Dev/BattleTech/App/PathFinding/core/Node.js",
		"/D/Dev/BattleTech/App/PathFinding/core/Util.js",
		"/D/Dev/BattleTech/BattleTech.sublime-project",
		"/D/Dev/BattleTech/require.js",
		"/D/Dev/BattleTech/pathfinding/Grid.js",
		"/D/Dev/BattleTech/pathfinding/AStarFinder.js",
		"/D/Dev/BattleTech/pathfinding/Node.js",
		"/D/Dev/BattleTech/pathfinding/path.html",
		"/D/Dev/BattleTech/App/PathFinding/PathFinding.js",
		"/D/Dev/BattleTech/index.html",
		"/D/Dev/BattleTech/pathfinding/Util.js",
		"/D/Dev/BattleTech/pathfinding/Heuristic.js",
		"/D/Dev/BattleTech/pathfinding/Heap.js",
		"/D/Dev/BattleTech/.gitignore",
		"/D/Dev/BattleTech/map/drawHex.js",
		"/C/Dev/BattleTech/drawmap.js",
		"/C/Dev/HBAB/SPA/index.html",
		"/C/Dev/HBAB/SPA/scripts/ForceGraph.js",
		"/C/Dev/HBAB/SPA/scripts/HitByABus.js",
		"/C/Dev/HBAB/SPA/scripts/FakeNetworkRepository.js",
		"/C/Dev/HBAB/SPA/ForceGraph.js",
		"/C/Users/hildebrand/Desktop/New folder/Oracle for HRS.ACL.OLD",
		"/C/Users/hildebrand/Desktop/New folder/Oracle for HRS.ACL",
		"/C/Dev/FizzBuzzMoq/.gitignore",
		"/C/Dev/RequireSquireSuperMarketKata/SuperMarket/src/ProductList.js",
		"/C/Dev/RequireSquireSuperMarketKata/SuperMarket/src/ItemBuyer.js",
		"/C/Dev/RequireSquireSuperMarketKata/SuperMarket/spec/unitTests/buySoup.js",
		"/C/Dev/RequireSquireSuperMarketKata/SuperMarket/spec/acceptanceTests/buyApplesFeature.js",
		"/C/Dev/RequireSquireSuperMarketKata/SuperMarket/spec/unitTests/buyApples.js",
		"/C/Dev/RequireSquireSuperMarketKata/SuperMarket/spec/unitTests/buyBread.js",
		"/C/Dev/RequireSquireSuperMarketKata/SuperMarket/spec/unitTests/buyNoodles.js",
		"/C/Dev/RequireSquireSuperMarketKata/SuperMarket/spec/unitTests/buyItems.js",
		"/C/Dev/RequireSquireSuperMarketKata/SuperMarket/spec/acceptanceTests/buySoupFeature.js",
		"/C/Dev/RequireSquireSuperMarketKata/SuperMarket/src/PriceFormatter.js",
		"/C/Dev/RequireSquireSuperMarketKata/SuperMarket/spec/unitTests/formatPrice.js"
	],
	"find":
	{
		"height": 36.0
	},
	"find_in_files":
	{
		"height": 0.0,
		"where_history":
		[
		]
	},
	"find_state":
	{
		"case_sensitive": false,
		"find_history":
		[
			"canMove",
			"svg",
			"initForceGraph",
			"pristine",
			"exit",
			"cloneModel",
			"users"
		],
		"highlight": true,
		"in_selection": false,
		"preserve_case": false,
		"regex": false,
		"replace_history":
		[
		],
		"reverse": false,
		"show_context": true,
		"use_buffer2": true,
		"whole_word": false,
		"wrap": true
	},
	"groups":
	[
		{
			"selected": 3,
			"sheets":
			[
				{
					"buffer": 0,
					"file": "App/PathFinding/core/Grid.js",
					"settings":
					{
						"buffer_size": 6569,
						"regions":
						{
						},
						"selection":
						[
							[
								3792,
								3792
							]
						],
						"settings":
						{
							"syntax": "Packages/JavaScript/JavaScript.tmLanguage",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 2176.0,
						"zoom_level": 1.0
					},
					"type": "text"
				},
				{
					"buffer": 1,
					"file": "App/PathFinding/core/Heuristic.js",
					"settings":
					{
						"buffer_size": 417,
						"regions":
						{
						},
						"selection":
						[
							[
								413,
								413
							]
						],
						"settings":
						{
							"syntax": "Packages/JavaScript/JavaScript.tmLanguage",
							"tab_size": 2,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"type": "text"
				},
				{
					"buffer": 2,
					"file": "App/PathFinding/core/Util.js",
					"settings":
					{
						"buffer_size": 3395,
						"regions":
						{
						},
						"selection":
						[
							[
								230,
								230
							]
						],
						"settings":
						{
							"syntax": "Packages/JavaScript/JavaScript.tmLanguage",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"type": "text"
				},
				{
					"buffer": 3,
					"file": "App/PathFinding/finders/AStarFinder.js",
					"settings":
					{
						"buffer_size": 3727,
						"regions":
						{
						},
						"selection":
						[
							[
								153,
								153
							]
						],
						"settings":
						{
							"syntax": "Packages/JavaScript/JavaScript.tmLanguage",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"type": "text"
				}
			]
		}
	],
	"incremental_find":
	{
		"height": 0.0
	},
	"input":
	{
		"height": 38.0
	},
	"layout":
	{
		"cells":
		[
			[
				0,
				0,
				1,
				1
			]
		],
		"cols":
		[
			0.0,
			1.0
		],
		"rows":
		[
			0.0,
			1.0
		]
	},
	"menu_visible": true,
	"replace":
	{
		"height": 0.0
	},
	"save_all_on_build": true,
	"select_file":
	{
		"height": 0.0,
		"selected_items":
		[
			[
				"grid",
				"pathfinding/Grid.js"
			],
			[
				"buyappfe",
				"spec/acceptanceTests/buyApplesFeature.js"
			],
			[
				"buya",
				"spec/unitTests/buyApples.js"
			],
			[
				"prod",
				"src/ProductList.js"
			],
			[
				"buysou",
				"spec/unitTests/buySoup.js"
			],
			[
				"buyso",
				"spec/unitTests/buySoup.js"
			],
			[
				"buynoo",
				"spec/unitTests/buyNoodles.js"
			],
			[
				"buyb",
				"spec/unitTests/buyBread.js"
			],
			[
				"buyapp",
				"spec/unitTests/buyApples.js"
			],
			[
				"i",
				"spec/unitTests/buyItems.js"
			],
			[
				"itembu",
				"src/ItemBuyer.js"
			],
			[
				"price",
				"src/PriceFormatter.js"
			],
			[
				"for",
				"spec/unitTests/formatPrice.js"
			],
			[
				"buyitem",
				"spec/unitTests/buyItems.js"
			]
		],
		"width": 0.0
	},
	"select_project":
	{
		"height": 0.0,
		"selected_items":
		[
		],
		"width": 0.0
	},
	"show_minimap": true,
	"show_open_files": false,
	"show_tabs": true,
	"side_bar_visible": true,
	"side_bar_width": 150.0,
	"status_bar_visible": true
}
